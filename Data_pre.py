#!/usr/bin/env python
# coding: utf-8

# In[1]:


import numpy as np
import pandas as pd


# In[2]:


df = pd.read_csv('C:/Users/buset/OneDrive/Desktop/Train_data02.csv')


# In[3]:


df.head()


# In[4]:


df['protocol_type'].value_counts()


# In[5]:


df['service'].value_counts()

df['service'].nunique()

df['flag'].value_counts()


# In[6]:


pd.get_dummies(df,columns=['protocol_type'])
    


# In[7]:


pd.get_dummies(df,columns=['protocol_type'],drop_first=True)


# In[8]:


from sklearn.model_selection import train_test_split



# In[9]:


x_train,x_test,y_train,y_test= train_test_split(df.iloc[:,0:10],df.iloc[:,-1],test_size=0.70,random_state=2)



# In[10]:


x_train.head()


# In[11]:


from sklearn.preprocessing import OneHotEncoder


# In[12]:


ohe = OneHotEncoder(drop='first')


# In[13]:


x_train_new = ohe.fit_transform(x_train[['protocol_type']]).toarray()



# In[14]:


x_test_new = ohe.transform(x_test[['protocol_type']]).toarray()


# In[15]:


np.hstack((x_train[['service','flag','src_bytes','dst_bytes','count','same_srv_rate','diff_srv_rate','dst_host_srv_count','dst_host_same_srv_rate']].values,x_train_new))


# In[16]:


counts_protocol = df['protocol_type'].value_counts()


# In[17]:


df['protocol_type'].nunique()
threshold = 0



# In[18]:


repl_protocol = counts_protocol[counts_protocol<=threshold].index


# In[19]:


protocol_df = pd.get_dummies(df['protocol_type'])


# In[20]:


protocol_df.replace({False: 0,True:1},inplace=True)


# In[21]:


protocol_df[:20]


# In[22]:


counts_service = df['service'].value_counts()


# In[23]:


df['service'].nunique()
threshold = 500;


# In[24]:


repl_service = counts_service[counts_service<=threshold].index


# In[25]:


service_df = pd.get_dummies(df['service'].replace(repl_service,'uncommon_service'))


# In[26]:


service_df.replace({False: 0,True:1},inplace=True)


# In[27]:


service_df[:20]


# In[28]:


counts_flag = df['flag'].value_counts()


# In[29]:


df['flag'].nunique()
threshold = 50


# In[30]:


repl_flag = counts_flag[counts_flag<=threshold].index



# In[31]:


flag_df = pd.get_dummies(df['flag'].replace(repl_flag,'uncommon_flag'))


# In[32]:


flag_df.replace({False: 0,True:1},inplace=True)


# In[33]:


flag_df[:20]


# In[34]:


x_train_new[:20]


# In[35]:


#from sklearn.compose import ColumnTransformer

"""transformer = ColumnTransformer(transformers=[
    ('tnf1',OneHotEncoder(sparse_output=False,drop='first'),['protocol_type','service','flag'])
],remainder='passthrough')"""
#transformer.fit_transform(x_train).shape

#x_train[:20]

df[:20]



# In[36]:


training_data = df.drop(['protocol_type','service','flag','class'],axis=1)


# In[37]:


training_data.head()


# In[38]:


training_data1 = pd.concat([training_data,protocol_df],axis=1)


# In[39]:


training_data1[:20]


# In[40]:


training_data2 = pd.concat([training_data1,service_df],axis=1)
training_data3 = pd.concat([training_data2,flag_df],axis=1)


# In[41]:


training_data2[:20]


# In[42]:


training_data3 = pd.concat([training_data2,flag_df],axis=1)


# In[43]:


training_data3[:100]


# In[44]:


training_data3.columns


# In[45]:


counts_class = df['class'].value_counts()



# In[46]:


df['class'].nunique()
threshold = 0


# In[47]:


repl_class = counts_class[counts_class<=threshold].index


# In[48]:


class_df = pd.get_dummies(df['class'])


# In[49]:


class_df.replace({False: 0,True:1},inplace=True)


# In[50]:


class_df[:100]


# In[51]:


# Random Forest Implementation


from sklearn.ensemble import RandomForestClassifier


# In[52]:


model = RandomForestClassifier()


# In[53]:


training_data3[:90]



# In[54]:


class_df[:90]


# In[55]:


training_data3.shape


# In[56]:


model.fit(training_data3,class_df)


# In[57]:


print(training_data3.columns)


# In[58]:


model.predict([[44,44,3,0.33,0.67,98,0.97,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0]])


# In[59]:


import pickle


# In[60]:


with open('trained_RandomForest.pkl','wb')as file:
    pickle.dump(model,file)

